/*******************************************************************************
 * Copyright (c) 2018, 2020 Kiel University and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/ 
package org.eclipse.elk.alg.rectpacking

import org.eclipse.elk.alg.rectpacking.RectPackingLayoutProvider
import org.eclipse.elk.core.math.ElkPadding
import org.eclipse.elk.alg.rectpacking.options.OptimizationGoal

// BUNDLE
bundle {
    metadataClass options.RectPackingMetaDataProvider
    idPrefix org.eclipse.elk.rectpacking
}

// ALGORITHM
algorithm rectpacking(RectPackingLayoutProvider) {
    label "ELK Rectangle Packing"
    description
        "Algorithm for packing of unconnected boxes, i.e. graphs without edges. The given order of the boxes
        is always preserved and the main reading direction of the boxes is left to right. The algorithm is divided into
        two phases. One phase approximates the width in which the rectangles can be placed. The next phase places the rectangles
        in rows using the previously calculated width as bounding width and bundles rectangles with a similar height in blocks.
        A compaction step reduces the size of the drawing.
        Finally, the rectangles are expanded to fill their bounding box and eliminate empty unused spaces."
    documentation "@rectpacking.md"
    metadataClass options.RectPackingOptions
    supports org.eclipse.elk.aspectRatio = 1.3
    supports org.eclipse.elk.expandNodes
    supports org.eclipse.elk.padding = new ElkPadding(15)
    supports org.eclipse.elk.spacing.nodeNode = 15
    supports org.eclipse.elk.contentAlignment
    // Common node micro layout
    supports org.eclipse.elk.nodeSize.constraints
    supports org.eclipse.elk.nodeSize.minimum
    supports org.eclipse.elk.nodeSize.options
    supports org.eclipse.elk.nodeLabels.placement
    supports org.eclipse.elk.omitNodeMicroLayout
    supports org.eclipse.elk.portLabels.placement
    supports optimizationGoal
    supports lastPlaceShift
    supports onlyFirstIteration
    supports rowCompaction
    supports expandToAspectRatio
    supports org.eclipse.elk.interactive
    supports org.eclipse.elk.interactiveLayout
    supports desiredPosition
    supports currentPosition
    supports targetWidth
}

// OPTIONS
advanced option optimizationGoal: OptimizationGoal {
    label "Optimization Goal"
    description
        "Optimization goal for approximation of the bounding box given by the first iteration. Determines whether layout is 
         sorted by the maximum scaling, aspect ratio, or area. Depending on the strategy the aspect ratio might be nearly ignored."
    documentation "@packingstrategy.md"
    targets nodes
    default = OptimizationGoal.MAX_SCALE_DRIVEN
}

programmatic option lastPlaceShift: boolean {
    label "Shift Last Placed."
    description
        "When placing a rectangle behind or below the last placed rectangle in the first iteration, it is sometimes 
         possible to shift the rectangle further to the left or right, resulting in less whitespace. True (default) 
         enables the shift and false disables it. Disabling the shift produces a greater approximated area by the first 
         iteration and a layout, when using ONLY the first iteration (default not the case), where it is sometimes 
         impossible to implement a size transformation of rectangles that will fill the bounding box and eliminate 
         empty spaces."
    targets nodes
    default = true
}

output option currentPosition: int {
    label "Current position of a node in the order of nodes"
    description
        "The rectangles are ordered. Normally according to their definition the the model.
         This option specifies the current position of a node."
    default = -1
    lowerBound = -1
    targets nodes
}

advanced option desiredPosition: int {
    label "Desired index of node"
    description
        "The rectangles are ordered. Normally according to their definition the the model.
         This option allows to specify a desired position that has preference over the original position."
    default = -1
    lowerBound = -1
    targets nodes
}

programmatic option onlyFirstIteration: boolean {
    label "Only Area Approximation"
    description
        "If enabled only the width approximation step is executed and the nodes are placed accordingly.
         The nodes are layouted according to the packingStrategy.
         If set to true not expansion of nodes is taking place."
    targets nodes
    default = false
}

programmatic option rowCompaction: boolean {
    label "Compact Rows"
    description
        "Enables compaction. Compacts blocks if they do not use the full height of the row.
         This option allows to have a smaller drawing.
         If this option is disabled all nodes are placed next to each other in rows."
    targets nodes
    default = true
}

advanced option expandToAspectRatio: boolean {
    label "Fit Aspect Ratio"
    description
        "Expands nodes if expandNodes is true to fit the aspect ratio instead of only in their bounds.
         The option is only useful if the used packingStrategy is ASPECT_RATIO_DRIVEN, otherwise this may result
         in unreasonable ndoe expansion."
    targets nodes
    default = false
    requires org.eclipse.elk.expandNodes
}

advanced option targetWidth: double {
    label "Target Width"
    description
        "Option to place the rectangles in the given target width instead of approximating the width using the desired
         aspect ratio.
         The padding is not included in this. Meaning a drawing will have width of targetwidth +
         horizontal padding."
    targets nodes
    default = -1
}
